local a,b=...local c=HeroLib;local d,e=HeroCache,c.Utils;local f=c.Unit;local g=f.Player;local h=f.Target;local j=c.Spell;local k=c.Item;local pairs=pairs;local l=string.gsub;local UnitInParty=UnitInParty;local UnitInRaid=UnitInRaid;b.Commons={}local m={}b.Commons.Everyone=m;local n=b.GUISettings.General;local o=b.GUISettings.Abilities;function m.TargetIsValid()return h:Exists()and g:CanAttack(h)and not h:IsDeadOrGhost()end;function m.UnitIsCycleValid(f,p,q)return not f:IsFacingBlacklisted()and not f:IsUserCycleBlacklisted()and(not p or f:FilteredTimeToDie(">",p,q))end;function m.CanDoTUnit(f,r)return f:Health()>=r or f:IsDummy()end;local s={Buff={j(191941),j(204151),j(239932)},Debuff={348074,358988,347607,351180,353929},Cast={197810,197418,198079,214003,235751,193668,227493,228852,193211,200732,241635,241636,236494,239932,254919,244899,245458,248499,258039,346985,350828,350202,350475,351066,350422,352538,350732,348071},Channel={}}local t={Buff={},Debuff={},Cast={350732,355352,353603},Channel={}}function m.ActiveMitigationNeeded()if not g:IsTanking(h)then return false end;if s.Cast[h:CastSpellID()]then return true end;for _,u in pairs(s.Buff)do if h:BuffUp(u,true)then return true end end;for _,v in pairs(s.Debuff)do local _,_,w,_,_,_,_,_,_,x,_,_,_,_,_,_=UnitDebuff("player",v)if x~=nil then if v==x then return true end end end;return false end;function m.BigActiveMitigationNeeded()if not g:IsTanking(h)then return false end;if t.Cast[h:CastSpellID()]then return true end;for _,u in pairs(t.Buff)do if h:BuffUp(u,true)then return true end end;for _,v in pairs(t.Debuff)do local _,_,w,_,_,_,_,_,_,x,_,_,_,_,_,_=UnitDebuff("player",i)if x~=nil then if v==x then return true end end end;return false end;do local y={Debuff={j(243961)}}function g:HealingAbsorbed()for _,v in pairs(y.Debuff)do if g:DebuffUp(v,true)then return true end end;return false end end;function m.Interrupt(z,j,A,B)if n.InterruptEnabled and h:IsInterruptible()and h:IsInRange(z)then if j:IsCastable()then if b.Cast(j,A)then return"Cast "..j:Name().." (Interrupt)"end elseif n.InterruptWithStun and h:CanBeStunned()then if B then for i=1,#B do if B[i][1]:IsCastable()and B[i][3]()then if b.Cast(B[i][1])then return B[i][2]end end end end end end end;function m.IsSoloMode()return n.SoloMode and not g:IsInRaidArea()and not g:IsInDungeonArea()end;function m.CastCycle(C,D,E,F,G,H)if E(h)then return b.Cast(C,G,H,F)end;if b.AoEON()then local I=h:GUID()for _,J in pairs(D)do if J:GUID()~=I and not J:IsFacingBlacklisted()and not J:IsUserCycleBlacklisted()and E(J)then b.CastLeftNameplate(J,C)break end end end end;function m.CastTargetIf(C,D,K,L,E,F,G,H)local M=not E or E and E(h)if not b.AoEON()and M then return b.Cast(C,G,H,F)end;if b.AoEON()then local N,O=nil,nil;for _,J in pairs(D)do if not J:IsFacingBlacklisted()and not J:IsUserCycleBlacklisted()and(J:AffectingCombat()or J:IsDummy())and(not O or e.CompareThis(K,L(J),O))then N,O=J,L(J)end end;if N then if M and(N:GUID()==h:GUID()or O==L(h))then return b.Cast(C,G,H,F)elseif E and E(N)or not E then b.CastLeftNameplate(N,C)end end end end;function m.GroupBuffMissing(P)local Q=40;if P:Name()=="Battle Shout"then Q=100 end;local R;if UnitInRaid("player")then R=f.Raid elseif UnitInParty("player")then R=f.Party else return false end;for _,S in pairs(R)do if S:Exists()and S:IsInRange(Q)and S:BuffDown(P,true)then return true end end;return false end;function m.GetCurrentEmpowerData(T)local U=0;local V={}_,_,_,StartTimeMS,EndTimeMS,_,_,_,_,StageTotal=UnitChannelInfo("player")if StageTotal and StageTotal>0 then local W=0;for i=1,StageTotal do V[i]={Start=W,Finish=W+GetUnitEmpowerStageDuration("player",i-1)/1000}b.Print(" Start"..i..": "..V[i].Start)b.Print("Finish"..i..": "..V[i].Finish)W=V[i].Finish;if StartTimeMS/1000+W<=GetTime()then U=i end end end;if T then return U else return V end end;function m.PotionSelected()local X={"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"}local Y=d.Persistent.Player.Class[3]local Z=X[Y]local a0={[250]="Blood",[251]="Frost",[252]="Unholy",[577]="Havoc",[581]="Vengeance",[102]="Balance",[103]="Feral",[104]="Guardian",[105]="Restoration",[1467]="Devastation",[1468]="Preservation",[1473]="Augmentation",[253]="BeastMastery",[254]="Marksmanship",[255]="Survival",[62]="Arcane",[63]="Fire",[64]="Frost",[268]="Brewmaster",[269]="Windwalker",[270]="Mistweaver",[65]="Holy",[66]="Protection",[70]="Retribution",[256]="Discipline",[257]="Holy",[258]="Shadow",[259]="Assassination",[260]="Outlaw",[261]="Subtlety",[262]="Elemental",[263]="Enhancement",[264]="Restoration",[265]="Affliction",[266]="Demonology",[267]="Destruction",[71]="Arms",[72]="Fury",[73]="Protection"}local a1=d.Persistent.Player.Spec[1]local a2=a0[a1]local a3=b.GUISettings.APL[Z][a2].PotionType.Selected;local a4={191914,191913,191912,191907,191906,191905,191383,191382,191381,191389,191388,191387}local a5={191365,191364,191363}local a6={191368,191367,191366}local a7={191401,191400,191399}if a3=="Power"then for _,a8 in ipairs(a4)do if k(a8):IsUsable()then return k(a8)end end elseif a3=="Frozen Focus"then for _,a8 in ipairs(a5)do if k(a8):IsUsable()then return k(a8)end end elseif a3=="Chilled Clarity"then for _,a8 in ipairs(a6)do if k(a8):IsUsable()then return k(a8)end end elseif a3=="Shocking Disclosure"then for _,a8 in ipairs(a7)do if k(a8):IsUsable()then return k(a8)end end else return nil end end